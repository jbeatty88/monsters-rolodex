{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","components/text_banner/text-banner.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["CardContainer","styled","div","MessageMeButton","button","Card","monster","alt","src","id","name","email","CardGrid","CardList","monsters","map","StyledInput","input","SearchBox","placeholder","handleChange","type","onChange","StyledH1","h1","TextBanner","children","App","props","e","setState","searchInput","target","value","state","fetch","then","resp","json","users","this","filteredMonsters","filter","toLowerCase","includes","className","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8RAOMA,EAAgBC,IAAOC,IAAV,gYAmBbC,EAAkBF,IAAOG,OAAV,uKAURC,EAAO,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAClB,OACI,eAACN,EAAD,WACI,qBACIO,IAAK,UACLC,IAAG,+BAA0BF,EAAQG,GAAlC,4BACP,6BAAKH,EAAQI,OACb,4BAAIJ,EAAQK,QACZ,cAACR,EAAD,6BC/BNS,EAAWX,IAAOC,IAAV,+IAWDW,EAAW,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACtB,OACI,cAACF,EAAD,UACKE,EAASC,KAAI,SAAAT,GAAO,OACjB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQG,UCzB7BO,EAAcf,IAAOgB,MAAV,2PAeJC,EAAY,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACpC,OACI,8BACI,cAACJ,EAAD,CAAaK,KAAM,SACZF,YAAaA,EACbG,SAAUF,OCpBvBG,EAAWtB,IAAOuB,GAAV,6GAODC,EAAa,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACxB,OACI,mCACI,cAACH,EAAD,UACKG,OCyDFC,E,kDA3CX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAyBVR,aAAe,SAACS,GACZ,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAxBrC,EAAKC,MAAQ,CACTpB,SAAU,GACViB,YAAa,IALF,E,qDAYnB,WAAqB,IAAD,OAChBI,MAAM,8CACDC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAChB,SAAUyB,S,oBAehD,WACI,MAAgCC,KAAKN,MAA9BpB,EAAP,EAAOA,SAAUiB,EAAjB,EAAiBA,YACXU,EAAmB3B,EAAS4B,QAAO,SAAApC,GAAO,OAAIA,EAAQI,KAAKiC,cAAcC,SAASb,EAAYY,kBACpG,OACI,sBAAKE,UAAU,MAAf,UACI,cAAC,EAAD,+BACA,cAAC,EAAD,CAAW1B,YAAa,kBAAmBC,aAAcoB,KAAKpB,eAC9D,cAAC,EAAD,CAAUN,SAAU2B,W,GAtClBK,aCfHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f57a9133.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\n/*\r\n* Notes:\r\n* - Padding is where you set the size of the card\r\n* */\r\nconst CardContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: #95dada;\r\n  border: 1px solid grey;\r\n  border-radius: 5px;\r\n  padding: 25px;\r\n  cursor: pointer;\r\n  -moz-osx-font-smoothing: grayscale;\r\n  backface-visibility: hidden;\r\n  transform: translateZ(0);\r\n  transition: transform(0.25s ease-out);\r\n\r\n  &:hover {\r\n    transform: scale(1.05);\r\n\r\n  }\r\n`\r\n\r\nconst MessageMeButton = styled.button`\r\n  background-color: whitesmoke;\r\n  border: 1px solid grey;\r\n  border-radius: 15px;\r\n  \r\n  &:hover {\r\n\tbackground-color: lightskyblue;\r\n  }`\r\n\r\n/* This component is responsible for the cards that will be displaying the actual information */\r\nexport const Card = ({monster}) => {\r\n    return (\r\n        <CardContainer>\r\n            <img\r\n                alt={\"monster\"}\r\n                src={`https://robohash.org/${monster.id}?set=set2&size=180x180`}/>\r\n            <h2>{monster.name}</h2>\r\n            <p>{monster.email}</p>\r\n            <MessageMeButton>Message Me</MessageMeButton>\r\n        </CardContainer>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport {Card} from \"../card/card.component\";\r\n\r\n\r\n/* Notes\r\n- Our grid only spans 85% of the view width | '-----' |\r\n- When making a grid, we need to specify that the display type is of grid\r\n- After that we can configure the grid:\r\n    - grid-template-columns lets us specify how many columns and the space they should take.\r\n        - 1 fr means it will take 1 fraction of the available space (equally space columns)\r\n    - grid-gap lets us specify the distance between the rows\r\n*/\r\nconst CardGrid = styled.div`\r\n  width: 85vw;\r\n  margin: 0 auto;\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr 1fr 1fr;\r\n  grid-gap: 20px;\r\n`\r\n\r\n/*\r\n* This component is responsible for displaying/listing the card components.\r\n* */\r\nexport const CardList = ({monsters}) => {\r\n    return (\r\n        <CardGrid>\r\n            {monsters.map(monster =>\r\n                <Card key={monster.id} monster={monster} />\r\n            )}\r\n        </CardGrid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledInput = styled.input`\r\n  -webkit-appearance: none;\r\n  border: none;\r\n  border-radius: 25px;\r\n  outline: none;\r\n  padding: 10px;\r\n  width: 25%;\r\n  line-height: 30px;\r\n  margin-bottom:30px;\r\n  \r\n  &:focus{\r\n    border: 1px solid deepskyblue;\r\n  }\r\n`\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => {\r\n    return (\r\n        <div>\r\n            <StyledInput type={'search'}\r\n                   placeholder={placeholder}\r\n                   onChange={handleChange}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledH1 = styled.h1`\r\n  font-family: 'Bigelow Rules', serif;\r\n  font-size: 72px;\r\n  color: #0ccac4;\r\n\r\n`\r\n\r\nexport const TextBanner = ({children}) => {\r\n    return (\r\n        <>\r\n            <StyledH1>\r\n                {children}\r\n            </StyledH1>\r\n        </>\r\n    )\r\n};\r\n","import './App.css';\nimport {Component, useEffect, useState} from \"react\";\nimport {CardList} from './components/card-list/card-list.component'\nimport {SearchBox} from \"./components/search-box/search-box.component\";\nimport {TextBanner} from \"./components/text_banner/text-banner.component\";\n\n/*const App = () => {\n    const [monsters, setMonsters] = useState([])\n    const [searchInput, setSearchInput] = useState('')\n\n    useEffect(() => {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(resp => resp.json())\n            .then(users => setMonsters(users))\n    }, [])\n\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchInput.toLowerCase()))\n\n\n    return(\n        <div className={'App'}>\n            <input type={'search'} placeholder={'Search'} onChange={e => setSearchInput(e.target.value)} />\n            <CardList monsters={filteredMonsters} />\n        </div>\n    )\n}*/\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            monsters: [],\n            searchInput: ''\n        };\n\n        /* Must bind methods to set context of 'this' */\n        // this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(resp => resp.json())\n            .then(users => this.setState({monsters: users}))\n    }\n\n    /* Don't forget to BIND methods in the constructor or use arrow functions */\n    /*handleChange(e) {\n        this.setState({searchInput: e.target.value})\n    }*/\n\n    /* ES6: Automatically bound (lexical scoping) 'this' to place where method defined (in class)\n    * This means we no longer have to bind it manually with regular methods\n    *  */\n    handleChange = (e) => {\n        this.setState({searchInput: e.target.value})\n    }\n\n    render() {\n        const {monsters, searchInput} = this.state;\n        const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchInput.toLowerCase()))\n        return (\n            <div className=\"App\">\n                <TextBanner>Monsters Rolodex</TextBanner>\n                <SearchBox placeholder={'Search Monsters'} handleChange={this.handleChange} />\n                <CardList monsters={filteredMonsters} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}